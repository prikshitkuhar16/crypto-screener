{"ast":null,"code":"// import React, { useLayoutEffect, useState } from \"react\";\n\n// import {\n//   LineChart,\n//   Line,\n//   XAxis,\n//   YAxis,\n//   Tooltip,\n//   CartesianGrid,\n//   Legend,\n//   ResponsiveContainer,\n// } from \"recharts\";\n// import { useContext } from \"react\";\n// import { CryptoContext } from \"./../context/CryptoContext\";\n\n// function CustomTooltip({ payload, label, active, currency = \"usd\" }) {\n//   if (active && payload && payload.length > 0) {\n//     return (\n//       <div className=\"custom-tooltip\">\n//         <p className=\"label text-sm text-cyan\">{`${label} : ${new Intl.NumberFormat(\n//           \"en-IN\",\n//           {\n//             style: \"currency\",\n//             currency: currency,\n//             minimumFractionDigits: 5,\n//           }\n//         ).format(payload[0].value)}`}</p>\n//       </div>\n//     );\n//   }\n\n//   return null;\n// }\n\n// const ChartComponent = ({ data, currency, type }) => {\n//   return (\n//     <ResponsiveContainer height={\"90%\"}>\n//       <LineChart width={400} height={400} data={data}>\n//         <Line\n//           type=\"monotone\"\n//           dataKey={type}\n//           stroke=\"#14ffec\"\n//           strokeWidth={\"1px\"}\n//         />\n//         <CartesianGrid stroke=\"#323232\" />\n//         <XAxis dataKey=\"date\" hide />\n//         <YAxis dataKey={type} hide domain={[\"auto\", \"auto\"]} />\n//         <Tooltip\n//           content={<CustomTooltip />}\n//           currency={currency}\n//           cursor={false}\n//           wrapperStyle={{ outline: \"none\" }}\n//         />\n//         <Legend />\n//       </LineChart>\n//     </ResponsiveContainer>\n//   );\n// };\n\n// const Chart = ({ id }) => {\n//   const [chartData, setChartData] = useState();\n//   let { currency } = useContext(CryptoContext);\n//   const [type, setType] = useState(\"prices\");\n//   const [days, setDays] = useState(7);\n\n//   useLayoutEffect(() => {\n//     const getChartData = async (id) => {\n//       try {\n//         const data = await fetch(\n//           `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=${days}&interval=daily`\n//         )\n//           .then((res) => res.json())\n//           .then((json) => json);\n\n//         // console.log(\"chart-data\", data);\n\n//         let convertedData = data[type].map((item) => {\n//           return {\n//             date: new Date(item[0]).toLocaleDateString(),\n//             [type]: item[1],\n//           };\n//         });\n\n//         // console.log(convertedData);\n//         setChartData(convertedData);\n//       } catch (error) {\n//         console.log(error);\n//       }\n//     };\n\n//     getChartData(id);\n//   }, [id, type, days]);\n\n//   return (\n//     <div className=\"w-full h-[60%]\">\n//       <ChartComponent data={chartData} currency={currency} type={type} />\n//       <div className=\"flex\">\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             type === \"prices\"\n//               ? \"bg-cyan text-cyan\"\n//               : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setType(\"prices\")}\n//         >\n//           Price\n//         </button>\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             type === \"market_caps\"\n//               ? \"bg-cyan text-cyan\"\n//               : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setType(\"market_caps\")}\n//         >\n//           market caps\n//         </button>\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             type === \"total_volumes\"\n//               ? \"bg-cyan text-cyan\"\n//               : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setType(\"total_volumes\")}\n//         >\n//           total volumes\n//         </button>\n\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             days === 7 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setDays(7)}\n//         >\n//           7d\n//         </button>\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             days === 14 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setDays(14)}\n//         >\n//           14d\n//         </button>\n//         <button\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\n//             days === 30 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\n//           }`}\n//           onClick={() => setDays(30)}\n//         >\n//           30d\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chart;","map":{"version":3,"names":[],"sources":["G:/WebD/CryptoBucks-Final-Code/src/components/Chart.js"],"sourcesContent":["// import React, { useLayoutEffect, useState } from \"react\";\r\n\r\n// import {\r\n//   LineChart,\r\n//   Line,\r\n//   XAxis,\r\n//   YAxis,\r\n//   Tooltip,\r\n//   CartesianGrid,\r\n//   Legend,\r\n//   ResponsiveContainer,\r\n// } from \"recharts\";\r\n// import { useContext } from \"react\";\r\n// import { CryptoContext } from \"./../context/CryptoContext\";\r\n\r\n// function CustomTooltip({ payload, label, active, currency = \"usd\" }) {\r\n//   if (active && payload && payload.length > 0) {\r\n//     return (\r\n//       <div className=\"custom-tooltip\">\r\n//         <p className=\"label text-sm text-cyan\">{`${label} : ${new Intl.NumberFormat(\r\n//           \"en-IN\",\r\n//           {\r\n//             style: \"currency\",\r\n//             currency: currency,\r\n//             minimumFractionDigits: 5,\r\n//           }\r\n//         ).format(payload[0].value)}`}</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return null;\r\n// }\r\n\r\n// const ChartComponent = ({ data, currency, type }) => {\r\n//   return (\r\n//     <ResponsiveContainer height={\"90%\"}>\r\n//       <LineChart width={400} height={400} data={data}>\r\n//         <Line\r\n//           type=\"monotone\"\r\n//           dataKey={type}\r\n//           stroke=\"#14ffec\"\r\n//           strokeWidth={\"1px\"}\r\n//         />\r\n//         <CartesianGrid stroke=\"#323232\" />\r\n//         <XAxis dataKey=\"date\" hide />\r\n//         <YAxis dataKey={type} hide domain={[\"auto\", \"auto\"]} />\r\n//         <Tooltip\r\n//           content={<CustomTooltip />}\r\n//           currency={currency}\r\n//           cursor={false}\r\n//           wrapperStyle={{ outline: \"none\" }}\r\n//         />\r\n//         <Legend />\r\n//       </LineChart>\r\n//     </ResponsiveContainer>\r\n//   );\r\n// };\r\n\r\n// const Chart = ({ id }) => {\r\n//   const [chartData, setChartData] = useState();\r\n//   let { currency } = useContext(CryptoContext);\r\n//   const [type, setType] = useState(\"prices\");\r\n//   const [days, setDays] = useState(7);\r\n\r\n//   useLayoutEffect(() => {\r\n//     const getChartData = async (id) => {\r\n//       try {\r\n//         const data = await fetch(\r\n//           `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=${days}&interval=daily`\r\n//         )\r\n//           .then((res) => res.json())\r\n//           .then((json) => json);\r\n\r\n//         // console.log(\"chart-data\", data);\r\n\r\n//         let convertedData = data[type].map((item) => {\r\n//           return {\r\n//             date: new Date(item[0]).toLocaleDateString(),\r\n//             [type]: item[1],\r\n//           };\r\n//         });\r\n\r\n//         // console.log(convertedData);\r\n//         setChartData(convertedData);\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//       }\r\n//     };\r\n\r\n//     getChartData(id);\r\n//   }, [id, type, days]);\r\n\r\n//   return (\r\n//     <div className=\"w-full h-[60%]\">\r\n//       <ChartComponent data={chartData} currency={currency} type={type} />\r\n//       <div className=\"flex\">\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             type === \"prices\"\r\n//               ? \"bg-cyan text-cyan\"\r\n//               : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setType(\"prices\")}\r\n//         >\r\n//           Price\r\n//         </button>\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             type === \"market_caps\"\r\n//               ? \"bg-cyan text-cyan\"\r\n//               : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setType(\"market_caps\")}\r\n//         >\r\n//           market caps\r\n//         </button>\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             type === \"total_volumes\"\r\n//               ? \"bg-cyan text-cyan\"\r\n//               : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setType(\"total_volumes\")}\r\n//         >\r\n//           total volumes\r\n//         </button>\r\n\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             days === 7 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setDays(7)}\r\n//         >\r\n//           7d\r\n//         </button>\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             days === 14 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setDays(14)}\r\n//         >\r\n//           14d\r\n//         </button>\r\n//         <button\r\n//           className={`text-sm py-0.5 px-1.5 ml-2 bg-opacity-25 rounded capitalize ${\r\n//             days === 30 ? \"bg-cyan text-cyan\" : \"bg-gray-200 text-gray-100\"\r\n//           }`}\r\n//           onClick={() => setDays(30)}\r\n//         >\r\n//           30d\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chart;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}